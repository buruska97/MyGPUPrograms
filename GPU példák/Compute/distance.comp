#version 430
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

uniform int N;
uniform float d; 
uniform float bigD;

layout(std430, binding = 1) buffer positionBufferTmp
{
	vec4 tmpPosition[];
};

void main()
{
	int currentX = int(gl_GlobalInvocationID.x);
	int currentY = int(gl_GlobalInvocationID.y);

	uint gid = gl_GlobalInvocationID.y * gl_WorkGroupSize.x * gl_NumWorkGroups.x + gl_GlobalInvocationID.x;

	vec3 thisPos = tmpPosition[gid].xyz;

	for (int i = -1; i <= 1; i++)
	{
		for (int j = -1; j <= 1; j++)
		{
			int newX = currentX + i;
			int newY = currentY + j;
			if (newX >= 0 && newX < N &&
				newY >= 0 && newY < N &&
				(i != 0 || j != 0))
			{
				uint otherGid = newY * gl_WorkGroupSize.x * gl_NumWorkGroups.x + newX;
				
				vec3 otherPos = tmpPosition[otherGid].xyz;

				float dist = (abs(i) == abs(j)) ? bigD : d;

				vec3 delta = normalize(otherPos - thisPos) * (length(otherPos - thisPos) - dist) * 0.5;
				thisPos = thisPos + delta * 0.00005f;
			}
		}
	}
	tmpPosition[gid].xyz = thisPos;

}